<?php
/**
 * Created by PhpStorm.
 * User: eugeniy
 * Date: 28.12.17
 * Time: 8:18
 */

    require_once "zs_index/SiteheaderPage.class.php";

    class CartPage extends SiteHeader
    {
        // Если все хорошо
        private $good;

        // Если все плохо
        private $error;

        // Товары в корзине
        private $goods;

        // Нужен для запроса
        private $helpquery;

        // Нужен для запроса
        private $helpresult;

        // Количество товаров в корзине
        private $reusultrowcount;

        // всего
        private $fullprice;


        private function PrepareGoods()
        {
            $this->helpquery = $this->database->prepare("SELECT COUNT(*) FROM GetGoodsInCart WHERE :Id = UserId", array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
            $this->helpquery->bindParam(":Id", $this->session->GetUser());

            $this->helpquery->execute();
            $this->reusultrowcount = $this->helpquery->fetch()[0];

            $this->query = $this->database->prepare("SELECT * FROM SearchResultTable WHERE ShowwindowProductsId IN (SELECT ShowwindowProductId FROM GetGoodsInCart WHERE :Id = UserId)", array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
            $this->query->bindParam(":Id", $this->session->GetUser());

            $this->query->execute();
            // IW.ShowwindowId, IW.ShowwindowProductsId, P.ProductId, P.ProductName, P.Price, P.PictureURL
            while ($this->result = $this->query->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT))
            {
                $this->smarty->assign('ginsw', $this->result[0]);
                $this->smarty->assign('name', $this->result[2]);
                $this->smarty->assign('price', $this->result[3]);
                $this->smarty->assign('image', $this->result[4]);

                $this->fullprice += $this->result[3];

                $productid = $this->result[1];
                $attrstring = "";

                $this->helpquery = $this->database->prepare("SELECT * FROM SearchGetProductAttributes WHERE ProductId = :Id AND Important = 1", array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
                $this->helpquery->bindParam(":Id", $productid);
                $this->helpquery->execute();

                // PAName, Value, ProductId
                while ($this->helpresult = $this->helpquery->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT))
                {
                    $attrstring .= '<tr><td>'. $this->helpresult[0]. ':</td><td style="vertical-align: middle;"><span class="label label-danger">'. $this->helpresult[1].'</span></td></tr>';
                }

                $this->smarty->assign('attrs', $attrstring);

                $this->goods .= $this->smarty->fetch("cart-goods.tpl");
            }
        }

        private function Build()
        {
            $this->smarty->assign("good", $this->good);
            $this->smarty->assign("error", $this->error);

            $this->smarty->assign("results", $this->goods);
            $this->smarty->assign("rescount", $this->reusultrowcount);
            $this->smarty->assign("price", $this->fullprice);

            return $this->smarty->fetch("cart.tpl");
        }

        public function Draw()
        {
            parent::Draw($this->Build()); // TODO: Change the autogenerated stub
        }

        public function __construct()
        {
            global $ROOT_PATH;

            parent::__construct("Корзина");

            if (isset($_GET['good'])) {
                $this->good = htmlspecialchars($_GET['good']);
            } else {
                $this->good = null;
            }

            if (isset($_GET['error'])) {
                $this->error = htmlspecialchars($_GET['error']);
            } else {
                $this->error = null;
            }

            if (!$this->session->isUser())
            {
                header('Location: http://'.$ROOT_PATH.'/Index.php');
            }

            $this->PrepareGoods();
        }
    }
?>